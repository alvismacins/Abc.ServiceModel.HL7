// ----------------------------------------------------------------------------
// <copyright file="HL7QueryContinuationPayloadSerializerDefaults.cs" company="PlaceholderCompany">
// Copyright (c) PlaceholderCompany. All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------

namespace Abc.ServiceModel.Protocol.HL7
{
    using System;
    using System.Runtime.Serialization;
    using System.Xml.Linq;
    using System.Xml.Serialization;

    /// <summary>
    /// Create HL7Subject serializer.
    /// </summary>
    internal static class HL7QueryContinuationPayloadSerializerDefaults
    {
        /// <summary>
        /// The ignore extension data object
        /// </summary>
        internal const bool IgnoreExtensionDataObject = false;

        /// <summary>
        /// The maximum items in object graph
        /// </summary>
        internal const int MaxItemsInObjectGraph = 0x10000;

        /// <summary>
        /// Creates the serializer.
        /// </summary>
        /// <param name="serializerType">The serializer type.</param>
        /// <param name="type">The type.</param>
        /// <returns>The HL7 Subject serializer.</returns>
        internal static XmlObjectSerializer CreateSerializer(Type serializerType, Type type, string rootName, string rootNamespace)
        {
            if (serializerType == typeof(XElementObjectSerializer))
            {
                return HL7SerializerCache.GetXElementObjectSerializer(
                    rootName: string.IsNullOrWhiteSpace(rootName) ? HL7Constants.Elements.QueryContinuation : rootName,
                    rootNamespace: string.IsNullOrWhiteSpace( rootNamespace ) ? HL7Constants.Namespace : rootNamespace );
            }

            return HL7SerializerCache.GetXmlObjectSerializer<XmlObjectSerializer>(
               type: type,
               serializerType: serializerType,
               rootName: string.IsNullOrWhiteSpace(rootName) ? HL7Constants.Elements.QueryContinuation : rootName,
               rootNamespace: string.IsNullOrWhiteSpace(rootNamespace) ? HL7Constants.Namespace : rootNamespace,
               serializerFactory: (_type, _serializerType, _rootName, _rootNamespace) =>
                   (XmlObjectSerializer)Activator.CreateInstance(_serializerType, _type, _rootName, _rootNamespace));
        }

        /// <summary>
        /// Creates the serializer.
        /// </summary>
        /// <param name="type">The type.</param>
        /// <returns>The HL7 Subject serializer.</returns>
        internal static XmlObjectSerializer CreateSerializer(Type type, string rootName, string rootNamespace)
        {
            // Generated by XSD tools
            if (type.GetCustomAttributes(typeof(XmlTypeAttribute), true).Length > 0)
            {
                return HL7SerializerCache.GetXmlSerializerObjectSerializer(
                    type: type,
                    rootName: string.IsNullOrWhiteSpace(rootName) ? HL7Constants.Elements.QueryContinuation : rootName,
                    rootNamespace: string.IsNullOrWhiteSpace(rootNamespace) ? HL7Constants.Namespace : rootNamespace);
            }

            if (type == typeof(XElement))
            {
                return HL7SerializerCache.GetXElementObjectSerializer(
                    rootName: string.IsNullOrWhiteSpace(rootName) ? HL7Constants.Elements.QueryContinuation : rootName,
                    rootNamespace: string.IsNullOrWhiteSpace(rootNamespace) ? HL7Constants.Namespace : rootNamespace);
            }

            return HL7SerializerCache.GetDataContractSerializer(
                   type: type,
                   rootName: string.IsNullOrWhiteSpace(rootName) ? HL7Constants.Elements.QueryContinuation : rootName,
                   rootNamespace: string.IsNullOrWhiteSpace(rootNamespace) ? HL7Constants.Namespace : rootNamespace);
        }
    }
}